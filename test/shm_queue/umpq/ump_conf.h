#ifndef UMP_CONF_H__
#define UMP_CONF_H__

#include "ump_chan.h"
#include "ump_queue.h"

#include "misc.h" // CACHE_ALIGNED

/**
 * Helpers for configuring UMP channels
 */

// ump peer configuration
struct ump_peer_conf {
    int core_id;       // if -1, assign cores round-robin
    unsigned shm_size;
    int shm_numa_node; // if -1, local node is used
    unsigned long delay; // XXX: should be removed
};

// configuration for a ump pair
struct ump_pair_conf {
    struct ump_peer_conf src, dst;
    int shared_numa_node;
    unsigned nonblock:1; // XXX: should(?) be removed
    struct ump_pair_conf *next;
};

// state needed for a ump peer
struct ump_peer_state {
    struct ump_chan chan;
    struct ump_queue queue;
    void *wake_ctx;
} CACHE_ALIGNED;

// state for a ump pair
struct ump_pair_state {
    struct ump_peer_state src, dst;
};

/**
 * UMP pair configuration is generated by strings.
 * This is done by ump_pair_conf_parse().
 * ump_pair_conf_help() prints help about the format of the strings.
 */
void ump_pair_conf_help(void);
struct ump_pair_conf *ump_pair_conf_parse(const char *s);

/**
 * UMP pair configuration is used to generate the necessary UMP state for each
 * pair
 */
struct ump_pair_state *ump_pair_state_create(struct ump_pair_conf *conf);
void ump_pair_conf_print(struct ump_pair_conf *pair);

// TODO
//void ump_pair_state_destroy(struct ump_pair_state *state);

#define SKM_BUF_SIZE 1000
void ump_end(void);
void ump_start(void);

#endif /* UMP_CONF_H__ */
